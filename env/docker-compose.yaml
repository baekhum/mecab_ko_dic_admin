services:
  es_setup:    
    build:
      context: ./data/elastic
      args:
        STACK_VERSION: ${STACK_VERSION}
    volumes:
      - $ELASTIC_CERTS_DIR:/usr/share/elasticsearch/config/certs
    user: "0"
    command: >
      bash -c '
        if [ x${ELASTIC_PASSWORD} == x ]; then
          echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
          exit 1;
        elif [ x${KIBANA_PASSWORD} == x ]; then
          echo "Set the KIBANA_PASSWORD environment variable in the .env file";
          exit 1;
        fi;
        if [ ! -f config/certs/ca.zip ]; then
          echo "Creating CA";
          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
          unzip config/certs/ca.zip -d config/certs;
        fi;
        if [ ! -f config/certs/certs.zip ]; then
          echo "Creating certs";
          echo -ne \
          "instances:\n"\
          "  - name: es01\n"\
          "    dns:\n"\
          "      - es01\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          > config/certs/instances.yml;
          bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
          unzip config/certs/certs.zip -d config/certs;
        fi;
        echo "Setting file permissions"
        chown -R root:root config/certs;
        find . -type d -exec chmod 750 \{\} \;;
        find . -type f -exec chmod 640 \{\} \;;
        echo "Waiting for Elasticsearch availability";
        until curl -s --cacert config/certs/ca/ca.crt https://es01:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
        echo "Setting kibana_system password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://es01:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
        echo "All done!";
      '
    healthcheck:
      test: ["CMD-SHELL", "[ -f config/certs/es01/es01.crt ]"]
      interval: 1s
      timeout: 5s
      retries: 120
  es01:
    build:
      context: ./data/elastic
      args:
        STACK_VERSION: ${STACK_VERSION}
    depends_on:
      es_setup:
        condition: service_healthy
    volumes:
      - $ELASTIC_CERTS_DIR:/usr/share/elasticsearch/config/certs
      - $ELASTIC_DATA_DIR:/usr/share/elasticsearch/data
    ports:
      - ${ES_PORT}:9200
    environment:
      - node.name=es01
      - cluster.name=${CLUSTER_NAME}
      - discovery.type=single-node
      # - cluster.initial_master_nodes=es01
      # - discovery.seed_hosts=es01
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/es01/es01.key
      - xpack.security.http.ssl.certificate=certs/es01/es01.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/es01/es01.key
      - xpack.security.transport.ssl.certificate=certs/es01/es01.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${LICENSE}
      - cluster.routing.allocation.disk.watermark.low=2gb
      - cluster.routing.allocation.disk.watermark.high=1gb
      - cluster.routing.allocation.disk.watermark.flood_stage=500mb
      - cluster.info.update.interval=1m      
    mem_limit: ${MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120
  kibana:
    image: docker.elastic.co/kibana/kibana:${STACK_VERSION}  
    depends_on:
      es01:
        condition: service_healthy    
    volumes:
      - $KIBANA_CERTS_DIR:/usr/share/kibana/config/certs
      - $KIBANA_DATA_DIR:/usr/share/kibana/data
    ports:
      - ${KIBANA_PORT}:5601
    environment:
      - SERVERNAME=kibana
      - ELASTICSEARCH_HOSTS=https://es01:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
    mem_limit: ${MEM_LIMIT}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120
  solr01:
    image: solr:latest
    volumes:
      - $SOLR_DATA_DIR:/var/solr/data
      - $SOLR_CONFIG_DIR:/var/solr/configsets
    ports:
      - "8983:8983"    
  postgres:
    image: postgres:latest
    environment:
      POSTGRES_USER: $POSTGRES_USER
      POSTGRES_PASSWORD: $POSTGRES_PASSWORD
      POSTGRES_DB: $POSTGRES_DB
    volumes:
      - $POSTGRES_DATA_DIR:/var/lib/postgresql/data
    ports:
      - "6543:5432"    
  mecab_ko_dic_builder:
    build:
      context: ./data/ubuntu
      args:
        USER_NAME: ${USER_NAME}
        UID: ${HOST_UID}
        GID: ${HOST_GID}
    image: ubuntun_mecab_ko_dic_builder:latest    
    volumes:
      - $UBUNTU_DATA_DIR:/home/$USER_NAME/app
    command: >
      bash -c '
        echo "start!"
        cd ~/app/mecab_ko_dic/;
        ln -s ./mecab-0.996-ko-0.9.2 ./mecab;
        ln -s ./mecab-ko-dic-2.1.1-20180720 ./mecab-ko-dic;
        cd ./mecab;
        wget -O config.guess "http://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.guess;hb=HEAD";
        wget -O config.sub "http://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.sub;hb=HEAD";
        ./configure;
        make;
        make check;
        sudo make install;

        sudo ldconfig;

        cd ../mecab-ko-dic;
        ./configure;
        make;
        sudo make install;
        mecab -D;

        cd /home/mecab-ko-dic-admin/app/mecab_ko_dic/lucene-solr/lucene/analysis/nori;
        mkdir -p /home/mecab_ko_dic_admin/.ant/lib;
        ant ivy-bootstrap;
        ant regenerate;

        echo "done!"
      '
      